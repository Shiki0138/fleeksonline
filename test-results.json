{
  "timestamp": "2025-08-06T01:43:30.329Z",
  "duration": 3759,
  "results": {
    "unit": {
      "passed": false,
      "duration": 1021,
      "output": "jest-haste-map: Haste module naming collision: fleeks-frontend\n  The following files share their name; please adjust your hasteImpl:\n    * <rootDir>/frontend/package.json\n    * <rootDir>/src/frontend/package.json\n\n",
      "errorOutput": "FAIL tests/unit/auth.test.js\n  ● Test suite failed to run\n\n    Cannot find module 'jsonwebtoken' from 'tests/unit/auth.test.js'\n\n    > 1 | const jwt = require('jsonwebtoken');\n        |             ^\n      2 | const AuthService = require('../../src/services/AuthService');\n      3 | const User = require('../../src/models/User');\n      4 |\n\n      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (tests/unit/auth.test.js:1:13)\n\nPASS tests/unit/services.test.js\n  Services Unit Tests\n    Base Service\n      ✓ should initialize with database connection (1 ms)\n      ✓ should handle database errors gracefully\n    User Service\n      ✓ should find all users\n      ✓ should find user by ID (1 ms)\n      ✓ should create new user\n      ✓ should update existing user (1 ms)\n      ✓ should delete user\n      ✓ should validate user data\n      ✓ should handle duplicate email errors (1 ms)\n    Business Logic\n      ✓ should enforce business rules\n      ✓ should validate input data\n      ✓ should handle edge cases (1 ms)\n\nFAIL tests/unit/controllers.test.js\n  Controllers Unit Tests\n    Base Controller\n      ✕ should handle successful responses\n      ✕ should handle error responses\n      ✕ should validate input parameters (1 ms)\n    User Controller\n      ✕ should get all users\n      ✕ should get user by ID\n      ✕ should create new user\n      ✕ should update existing user\n      ✕ should delete user\n      ✕ should handle validation errors\n    Error Handling\n      ✕ should handle 404 errors\n      ✕ should handle 500 errors\n      ✕ should sanitize error messages\n\n  ● Controllers Unit Tests › Base Controller › should handle successful responses\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Base Controller › should handle error responses\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Base Controller › should validate input parameters\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should get all users\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should get user by ID\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should create new user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should update existing user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should delete user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should handle validation errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should handle 404 errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should handle 500 errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should sanitize error messages\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\nPASS tests/unit/models.test.js\n  Models Unit Tests\n    Base Model\n      ✓ should create model instance\n      ✓ should validate required fields\n      ✓ should serialize data correctly (1 ms)\n    User Model\n      ✓ should create user with valid data\n      ✓ should validate email format\n      ✓ should hash passwords\n      ✓ should compare passwords\n      ✓ should generate timestamps (1 ms)\n    Data Validation\n      ✓ should validate required fields\n      ✓ should validate field types\n      ✓ should validate field constraints\n\nTest Suites: 2 failed, 2 passed, 4 total\nTests:       12 failed, 23 passed, 35 total\nSnapshots:   0 total\nTime:        0.378 s, estimated 1 s\nRan all test suites matching /unit/i.\n",
      "exitCode": 1
    },
    "integration": {
      "passed": false,
      "duration": 670,
      "output": "",
      "errorOutput": "PASS tests/integration/api.test.js\n  API Integration Tests\n    Health Check Endpoints\n      ✓ GET /health should return server status (1 ms)\n      ✓ GET /api/version should return API version\n    User API Endpoints\n      GET /api/users\n        ✓ should return all users (1 ms)\n        ✓ should support pagination\n        ✓ should support filtering (1 ms)\n      GET /api/users/:id\n        ✓ should return user by ID\n        ✓ should return 404 for non-existent user (2 ms)\n      POST /api/users\n        ✓ should create new user with valid data (1 ms)\n        ✓ should reject invalid data\n        ✓ should reject duplicate email\n      PUT /api/users/:id\n        ✓ should update existing user (1 ms)\n        ✓ should return 404 for non-existent user\n      DELETE /api/users/:id\n        ✓ should delete existing user\n        ✓ should return 404 for non-existent user (1 ms)\n    Authentication Endpoints\n      ✓ POST /api/auth/login should authenticate user\n      ✓ POST /api/auth/logout should logout user\n      ✓ POST /api/auth/refresh should refresh token\n    Error Handling\n      ✓ should handle 404 for unknown routes\n      ✓ should handle malformed JSON (1 ms)\n      ✓ should handle large payloads\n\nFAIL tests/integration/server.test.js\n  ● Test suite failed to run\n\n    Cannot find module 'compression' from 'src/server.js'\n\n    Require stack:\n      src/server.js\n      tests/integration/server.test.js\n\n      2 | const cors = require('cors');\n      3 | const helmet = require('helmet');\n    > 4 | const compression = require('compression');\n        |                     ^\n      5 | const rateLimit = require('express-rate-limit');\n      6 | const session = require('express-session');\n      7 | const RedisStore = require('connect-redis').default;\n\n      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (src/server.js:4:21)\n      at Object.require (tests/integration/server.test.js:2:16)\n\nTest Suites: 1 failed, 1 passed, 2 total\nTests:       20 passed, 20 total\nSnapshots:   0 total\nTime:        0.298 s\nRan all test suites matching /integration/i.\n",
      "exitCode": 1
    },
    "e2e": {
      "passed": true,
      "duration": 526,
      "output": "",
      "errorOutput": "PASS tests/e2e/userWorkflow.test.js\n  E2E User Workflow Tests\n    Complete User Registration and Login Flow\n      ✓ should complete full user registration workflow (1 ms)\n      ✓ should handle registration with duplicate email (1 ms)\n      ✓ should handle password reset workflow\n    User Data Management Workflow\n      ✓ should complete CRUD operations on user data\n      ✓ should handle bulk operations (1 ms)\n      ✓ should handle concurrent operations\n    Performance and Load Testing\n      ✓ should handle multiple concurrent users (1 ms)\n      ✓ should maintain performance under load\n      ✓ should handle memory usage efficiently\n    Error Recovery Workflows\n      ✓ should recover from server errors (1 ms)\n      ✓ should handle network timeouts\n      ✓ should handle invalid data gracefully\n    Security Workflows\n      ✓ should prevent unauthorized access\n      ✓ should handle SQL injection attempts (1 ms)\n      ✓ should handle XSS attempts\n      ✓ should rate limit requests\n\nTest Suites: 1 passed, 1 total\nTests:       16 passed, 16 total\nSnapshots:   0 total\nTime:        0.163 s\nRan all test suites matching /e2e/i.\n",
      "exitCode": 0
    },
    "coverage": {
      "passed": false,
      "duration": 1540,
      "output": "-----------------------------------|---------|----------|---------|---------|-------------------\nFile                               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n-----------------------------------|---------|----------|---------|---------|-------------------\nAll files                          |       0 |        0 |       0 |       0 |                   \n ai                                |       0 |        0 |       0 |       0 |                   \n  AIOrchestrator.js                |       0 |        0 |       0 |       0 | 6-658             \n  example-integration.js           |       0 |        0 |       0 |       0 | 6-457             \n ai/services                       |       0 |        0 |       0 |       0 |                   \n  AIAnalyticsService.js            |       0 |        0 |       0 |       0 | 6-718             \n  AISecurityService.js             |       0 |        0 |       0 |       0 | 6-656             \n  BehaviorPredictionService.js     |       0 |        0 |       0 |       0 | 6-484             \n  ContentPersonalizationService.js |       0 |        0 |       0 |       0 | 6-544             \n  ConversationalAIService.js       |       0 |        0 |       0 |       0 | 6-623             \n  VideoAnalysisService.js          |       0 |        0 |       0 |       0 | 6-359             \n backend                           |       0 |      100 |     100 |       0 |                   \n  jest.config.js                   |       0 |      100 |     100 |       0 | 1                 \n config                            |       0 |        0 |       0 |       0 |                   \n  database.js                      |       0 |        0 |       0 |       0 | 1-113             \n  logger.js                        |       0 |        0 |       0 |       0 | 1-146             \n  redis.js                         |       0 |        0 |       0 |       0 | 1-185             \n controllers                       |       0 |        0 |       0 |       0 |                   \n  AuthController.js                |       0 |        0 |       0 |       0 | 1-236             \n  UserController.js                |       0 |        0 |       0 |       0 | 1-262             \n middleware                        |       0 |        0 |       0 |       0 |                   \n  auth.js                          |       0 |        0 |       0 |       0 | 1-216             \n  errorHandler.js                  |       0 |        0 |       0 |       0 | 1-182             \n  requestLogger.js                 |       0 |      100 |       0 |       0 | 1-25              \n models                            |       0 |        0 |       0 |       0 |                   \n  User.js                          |       0 |        0 |       0 |       0 | 1-287             \n routes                            |       0 |        0 |       0 |       0 |                   \n  api.js                           |       0 |        0 |       0 |       0 | 1-146             \n  auth.js                          |       0 |      100 |     100 |       0 | 1-23              \n  users.js                         |       0 |      100 |     100 |       0 | 1-18              \n security                          |       0 |      100 |       0 |       0 |                   \n  index.js                         |       0 |      100 |       0 |       0 | 1-38              \n security/anomaly                  |       0 |        0 |       0 |       0 |                   \n  AnomalyDetectionService.js       |       0 |        0 |       0 |       0 | 1-655             \n security/biometrics               |       0 |        0 |       0 |       0 |                   \n  BiometricAuthService.js          |       0 |        0 |       0 |       0 | 1-559             \n security/client-examples          |       0 |        0 |       0 |       0 |                   \n  webauthn-client.js               |       0 |        0 |       0 |       0 | 8-402             \n security/drm                      |       0 |        0 |       0 |       0 |                   \n  DRMStreamingService.js           |       0 |        0 |       0 |       0 | 1-856             \n security/middleware               |       0 |        0 |       0 |       0 |                   \n  securityMiddleware.js            |       0 |        0 |       0 |       0 | 1-378             \n security/privacy                  |       0 |        0 |       0 |       0 |                   \n  PrivacyAnalyticsService.js       |       0 |        0 |       0 |       0 | 1-714             \n security/routes                   |       0 |        0 |       0 |       0 |                   \n  securityRoutes.js                |       0 |        0 |       0 |       0 | 1-316             \n security/webauthn                 |       0 |        0 |       0 |       0 |                   \n  WebAuthnService.js               |       0 |        0 |       0 |       0 | 6-470             \n security/zero-trust               |       0 |        0 |       0 |       0 |                   \n  ZeroTrustManager.js              |       0 |        0 |       0 |       0 | 1-449             \n services                          |       0 |        0 |       0 |       0 |                   \n  AuthService.js                   |       0 |        0 |       0 |       0 | 1-298             \n utils                             |       0 |        0 |       0 |       0 |                   \n  helpers.js                       |       0 |        0 |       0 |       0 | 11-215            \n  validation.js                    |       0 |        0 |       0 |       0 | 1-158             \n-----------------------------------|---------|----------|---------|---------|-------------------\n",
      "errorOutput": "FAIL tests/unit/controllers.test.js\n  Controllers Unit Tests\n    Base Controller\n      ✕ should handle successful responses (1 ms)\n      ✕ should handle error responses (1 ms)\n      ✕ should validate input parameters\n    User Controller\n      ✕ should get all users (1 ms)\n      ✕ should get user by ID\n      ✕ should create new user (1 ms)\n      ✕ should update existing user\n      ✕ should delete user\n      ✕ should handle validation errors (1 ms)\n    Error Handling\n      ✕ should handle 404 errors (1 ms)\n      ✕ should handle 500 errors\n      ✕ should sanitize error messages (1 ms)\n\n  ● Controllers Unit Tests › Base Controller › should handle successful responses\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Base Controller › should handle error responses\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Base Controller › should validate input parameters\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should get all users\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should get user by ID\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should create new user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should update existing user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should delete user\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › User Controller › should handle validation errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should handle 404 errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should handle 500 errors\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\n  ● Controllers Unit Tests › Error Handling › should sanitize error messages\n\n    TypeError: Cannot read properties of undefined (reading 'createMockRequest')\n\n      13 |   beforeEach(() => {\n      14 |     mockService = mockHelpers.createMockService();\n    > 15 |     mockRequest = global.testUtils.createMockRequest();\n         |                                    ^\n      16 |     mockResponse = global.testUtils.createMockResponse();\n      17 |   });\n      18 |   \n\n      at Object.createMockRequest (tests/unit/controllers.test.js:15:36)\n\nPASS tests/integration/api.test.js\n  API Integration Tests\n    Health Check Endpoints\n      ✓ GET /health should return server status (1 ms)\n      ✓ GET /api/version should return API version (1 ms)\n    User API Endpoints\n      GET /api/users\n        ✓ should return all users\n        ✓ should support pagination\n        ✓ should support filtering (1 ms)\n      GET /api/users/:id\n        ✓ should return user by ID\n        ✓ should return 404 for non-existent user\n      POST /api/users\n        ✓ should create new user with valid data (1 ms)\n        ✓ should reject invalid data\n        ✓ should reject duplicate email (1 ms)\n      PUT /api/users/:id\n        ✓ should update existing user\n        ✓ should return 404 for non-existent user\n      DELETE /api/users/:id\n        ✓ should delete existing user (1 ms)\n        ✓ should return 404 for non-existent user\n    Authentication Endpoints\n      ✓ POST /api/auth/login should authenticate user (1 ms)\n      ✓ POST /api/auth/logout should logout user\n      ✓ POST /api/auth/refresh should refresh token\n    Error Handling\n      ✓ should handle 404 for unknown routes (1 ms)\n      ✓ should handle malformed JSON\n      ✓ should handle large payloads\n\nPASS tests/e2e/userWorkflow.test.js\n  E2E User Workflow Tests\n    Complete User Registration and Login Flow\n      ✓ should complete full user registration workflow\n      ✓ should handle registration with duplicate email (1 ms)\n      ✓ should handle password reset workflow\n    User Data Management Workflow\n      ✓ should complete CRUD operations on user data (1 ms)\n      ✓ should handle bulk operations\n      ✓ should handle concurrent operations (1 ms)\n    Performance and Load Testing\n      ✓ should handle multiple concurrent users\n      ✓ should maintain performance under load (1 ms)\n      ✓ should handle memory usage efficiently\n    Error Recovery Workflows\n      ✓ should recover from server errors (1 ms)\n      ✓ should handle network timeouts\n      ✓ should handle invalid data gracefully (1 ms)\n    Security Workflows\n      ✓ should prevent unauthorized access\n      ✓ should handle SQL injection attempts\n      ✓ should handle XSS attempts (1 ms)\n      ✓ should rate limit requests\n\nPASS tests/unit/services.test.js\n  Services Unit Tests\n    Base Service\n      ✓ should initialize with database connection (1 ms)\n      ✓ should handle database errors gracefully\n    User Service\n      ✓ should find all users\n      ✓ should find user by ID (1 ms)\n      ✓ should create new user\n      ✓ should update existing user (1 ms)\n      ✓ should delete user\n      ✓ should validate user data\n      ✓ should handle duplicate email errors (1 ms)\n    Business Logic\n      ✓ should enforce business rules\n      ✓ should validate input data\n      ✓ should handle edge cases (1 ms)\n\nPASS tests/unit/models.test.js\n  Models Unit Tests\n    Base Model\n      ✓ should create model instance (1 ms)\n      ✓ should validate required fields\n      ✓ should serialize data correctly\n    User Model\n      ✓ should create user with valid data\n      ✓ should validate email format (1 ms)\n      ✓ should hash passwords (1 ms)\n      ✓ should compare passwords\n      ✓ should generate timestamps\n    Data Validation\n      ✓ should validate required fields\n      ✓ should validate field types\n      ✓ should validate field constraints\n\nFAIL tests/unit/auth.test.js\n  ● Test suite failed to run\n\n    Cannot find module 'jsonwebtoken' from 'tests/unit/auth.test.js'\n\n    > 1 | const jwt = require('jsonwebtoken');\n        |             ^\n      2 | const AuthService = require('../../src/services/AuthService');\n      3 | const User = require('../../src/models/User');\n      4 |\n\n      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (tests/unit/auth.test.js:1:13)\n\nFAIL tests/integration/server.test.js\n  ● Test suite failed to run\n\n    Cannot find module 'compression' from 'src/server.js'\n\n    Require stack:\n      src/server.js\n      tests/integration/server.test.js\n\n      2 | const cors = require('cors');\n      3 | const helmet = require('helmet');\n    > 4 | const compression = require('compression');\n        |                     ^\n      5 | const rateLimit = require('express-rate-limit');\n      6 | const session = require('express-session');\n      7 | const RedisStore = require('connect-redis').default;\n\n      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (src/server.js:4:21)\n      at Object.require (tests/integration/server.test.js:2:16)\n\nTest Suites: 3 failed, 4 passed, 7 total\nTests:       12 failed, 59 passed, 71 total\nSnapshots:   0 total\nTime:        1.169 s\nRan all test suites.\n",
      "exitCode": 1
    },
    "performance": {
      "passed": true,
      "duration": 0,
      "message": "Performance tests not yet implemented"
    }
  },
  "summary": {
    "totalTestSuites": 5,
    "passedTestSuites": 2,
    "failedTestSuites": 3,
    "success": false,
    "successRate": "40.00"
  },
  "coverage": null
}