// This is your Prisma schema file for FLEEKS
// YouTube動画限定公開プラットフォーム

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipType {
  FREE
  PREMIUM
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PostType {
  VIDEO
  BLOG
  LIVE_STREAM
}

enum ScheduleStatus {
  PENDING
  PUBLISHED
  FAILED
  CANCELLED
}

enum StreamStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  username         String           @unique
  password         String
  firstName        String?
  lastName         String?
  profileImage     String?
  membershipType   MembershipType   @default(FREE)
  membershipExpiry DateTime?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  viewingHistory   ViewingHistory[]
  subscriptions    Subscription[]
  favorites        Favorite[]
  blogPosts        BlogPost[]
  blogComments     BlogComment[]
  blogLikes        BlogLike[]
  liveStreams      LiveStream[]
  streamViewers    StreamViewer[]
  streamChatMessages StreamChatMessage[]
  postSchedules    PostSchedule[]

  @@map("users")
  @@index([email])
  @@index([username])
}

model Category {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  videos       Video[]
  liveStreams  LiveStream[]

  @@map("categories")
  @@index([slug])
}

model Video {
  id             String    @id @default(cuid())
  youtubeVideoId String    @unique
  title          String
  description    String?
  thumbnailUrl   String
  duration       Int       // in seconds
  categoryId     String
  tags           String[]
  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  viewCount      Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  category       Category         @relation(fields: [categoryId], references: [id])
  viewingHistory ViewingHistory[]
  favorites      Favorite[]

  @@map("videos")
  @@index([youtubeVideoId])
  @@index([categoryId])
  @@index([isPublished])
}

model ViewingHistory {
  id              String   @id @default(cuid())
  userId          String
  videoId         String
  watchedDuration Int      @default(0) // in seconds
  lastWatchedAt   DateTime @default(now())
  totalWatchTime  Int      @default(0) // in seconds
  completed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("viewing_history")
  @@index([userId])
  @@index([videoId])
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String
  planType  SubscriptionPlan
  amount    Decimal            @db.Decimal(10, 2)
  status    SubscriptionStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
  @@index([userId])
  @@index([status])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("favorites")
  @@index([userId])
  @@index([videoId])
}

// ブログ記事
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  coverImage  String?
  authorId    String
  categoryId  String?
  tags        String[]
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments    BlogComment[]
  likes       BlogLike[]

  @@map("blog_posts")
  @@index([authorId])
  @@index([categoryId])
  @@index([isPublished])
  @@index([slug])
}

// ブログカテゴリー
model BlogCategory {
  id           String     @id @default(cuid())
  name         String     @unique
  slug         String     @unique
  description  String?
  color        String?    // カテゴリーの色
  displayOrder Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  posts        BlogPost[]

  @@map("blog_categories")
  @@index([slug])
}

// ブログコメント
model BlogComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  parentId  String?
  isApproved Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      BlogPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    BlogComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   BlogComment[] @relation("CommentReplies")

  @@map("blog_comments")
  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

// ブログいいね
model BlogLike {
  id       String   @id @default(cuid())
  userId   String
  postId   String
  createdAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("blog_likes")
  @@index([userId])
  @@index([postId])
}

// ライブ配信
model LiveStream {
  id          String       @id @default(cuid())
  title       String
  description String?
  streamKey   String       @unique
  streamUrl   String?
  thumbnailUrl String?
  hostId      String
  categoryId  String?
  status      StreamStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  maxViewers  Int          @default(0)
  currentViewers Int       @default(0)
  tags        String[]
  isPrivate   Boolean      @default(false)
  recordingUrl String?
  chatEnabled Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  host        User              @relation(fields: [hostId], references: [id], onDelete: Cascade)
  category    Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  viewers     StreamViewer[]
  chatMessages StreamChatMessage[]

  @@map("live_streams")
  @@index([hostId])
  @@index([categoryId])
  @@index([status])
}

// ライブ配信視聴者
model StreamViewer {
  id       String     @id @default(cuid())
  userId   String
  streamId String
  joinedAt DateTime   @default(now())
  leftAt   DateTime?

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream   LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([userId, streamId])
  @@map("stream_viewers")
  @@index([userId])
  @@index([streamId])
}

// ライブ配信チャット
model StreamChatMessage {
  id       String     @id @default(cuid())
  content  String
  userId   String
  streamId String
  createdAt DateTime  @default(now())

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream   LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@map("stream_chat_messages")
  @@index([userId])
  @@index([streamId])
}

// 投稿スケジュール
model PostSchedule {
  id          String         @id @default(cuid())
  title       String
  type        PostType
  contentId   String?        // video_id or blog_post_id
  scheduledAt DateTime
  status      ScheduleStatus @default(PENDING)
  authorId    String
  content     Json?          // スケジュールされたコンテンツの詳細
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post_schedules")
  @@index([authorId])
  @@index([scheduledAt])
  @@index([status])
}