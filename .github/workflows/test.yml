name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # Pre-flight checks
  preflight:
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run }}
    steps:
      - uses: actions/checkout@v3
      - name: Check for changes
        id: changes
        run: |
          echo "should-run=true" >> $GITHUB_OUTPUT

  # Dependency and security audit
  security-audit:
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level high
      
      - name: Run dependency check
        run: npx better-npm-audit audit --level high

  # Linting and code quality
  code-quality:
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npx prettier --check "src/**/*.js" "tests/**/*.js"

  # Unit tests
  unit-tests:
    needs: [security-audit, code-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
      
      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: test-results.json

  # Integration tests
  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npm run migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results.json

  # End-to-end tests
  e2e-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          npm run migrate:test
          npm run seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Start application
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          PORT: 3000
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results.json

  # Security tests
  security-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test
      
      - name: Run SAST scan
        run: npx semgrep --config=auto src/
      
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: test-results.json

  # Performance tests
  performance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test-results.json

  # Coverage analysis
  coverage:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run coverage tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: Check coverage thresholds
        run: |
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const thresholds = {
              statements: 80,
              branches: 75,
              functions: 80,
              lines: 80
            };
            
            let failed = false;
            Object.entries(thresholds).forEach(([key, threshold]) => {
              const actual = coverage.total[key].pct;
              if (actual < threshold) {
                console.error(`Coverage for ${key} (${actual}%) is below threshold (${threshold}%)`);
                failed = true;
              }
            });
            
            if (failed) process.exit(1);
            console.log('All coverage thresholds met!');
          "

  # Quality gates
  quality-gates:
    needs: [security-tests, performance-tests, coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download all test results
        uses: actions/download-artifact@v3
      
      - name: Evaluate quality gates
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Check all test results
            const testDirs = fs.readdirSync('.').filter(dir => 
              dir.includes('test-results') && fs.statSync(dir).isDirectory()
            );
            
            let allPassed = true;
            testDirs.forEach(dir => {
              const resultsFile = path.join(dir, 'test-results.json');
              if (fs.existsSync(resultsFile)) {
                const results = JSON.parse(fs.readFileSync(resultsFile));
                if (!results.summary.success) {
                  console.error(`Quality gate failed for ${dir}`);
                  allPassed = false;
                }
              }
            });
            
            if (!allPassed) {
              console.error('Quality gates failed!');
              process.exit(1);
            }
            
            console.log('All quality gates passed!');
          "

  # Deployment (only on main branch and after all tests pass)
  deploy:
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment steps here
      
      - name: Post-deployment smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add smoke tests here

  # Notification
  notify:
    needs: [quality-gates, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify team
        run: |
          if [ "${{ needs.quality-gates.result }}" == "success" ]; then
            echo "✅ All quality gates passed!"
          else
            echo "❌ Quality gates failed!"
          fi